import {ProjectDocument} from '../../types';

/** MDXÏö© Content ================================ */
export const sampleCompiledSourceHtml =
  '/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: "p",\n    ul: "ul",\n    li: "li",\n    pre: "pre",\n    code: "code",\n    span: "span"\n  }, _provideComponents(), props.components), {Typography, CustomCode, Divider} = _components;\n  if (!CustomCode) _missingMdxReference("CustomCode", true, "14:3-14:58");\n  if (!Divider) _missingMdxReference("Divider", true, "16:1-16:46");\n  if (!Typography) _missingMdxReference("Typography", true, "2:1-4:14");\n  return _jsxs(_Fragment, {\n    children: [_jsx(Typography, {\n      backgroundColor: "gray",\n      variant: "h3",\n      children: _jsx(_components.p, {\n        children: "üßöüèª¬†‚öôÔ∏è¬†backgroundColor_Green Text (Typography Component, h3)"\n      })\n    }), "\\n", _jsxs(_components.ul, {\n      children: ["\\n", _jsx(_components.li, {\n        children: "One"\n      }), "\\n", _jsx(_components.li, {\n        children: "Two"\n      }), "\\n", _jsx(_components.li, {\n        children: "Three"\n      }), "\\n"]\n    }), "\\n", _jsx(Typography, {\n      backgroundColor: "gray",\n      variant: "h3",\n      children: _jsx(_components.p, {\n        children: "‚öôÔ∏è¬†backgroundColor_Gray Text (Typography Component, h3)"\n      })\n    }), "\\n", _jsxs(_components.ul, {\n      children: ["\\n", _jsxs(_components.li, {\n        children: ["\\n", _jsx(CustomCode, {\n          color: "orange",\n          children: "I am CustomCode"\n        }), "\\n"]\n      }), "\\n"]\n    }), "\\n", _jsx(Divider, {\n      height: "2rem",\n      children: "I am Divider"\n    }), "\\n", _jsx("br", {}), "\\n", _jsx(_components.pre, {\n      className: "language-js",\n      children: _jsxs(_components.code, {\n        className: "language-js",\n        children: [_jsx(_components.span, {\n          className: "token keyword",\n          children: "const"\n        }), " one ", _jsx(_components.span, {\n          className: "token operator",\n          children: "="\n        }), " ", _jsx(_components.span, {\n          className: "token number",\n          children: "1"\n        }), _jsx(_components.span, {\n          className: "token punctuation",\n          children: ";"\n        }), "\\n", _jsx(_components.span, {\n          className: "token keyword",\n          children: "const"\n        }), " two ", _jsx(_components.span, {\n          className: "token operator",\n          children: "="\n        }), " ", _jsx(_components.span, {\n          className: "token number",\n          children: "2"\n        }), _jsx(_components.span, {\n          className: "token punctuation",\n          children: ";"\n        }), "\\n", _jsx(_components.span, {\n          className: "token console class-name",\n          children: "console"\n        }), _jsx(_components.span, {\n          className: "token punctuation",\n          children: "."\n        }), _jsx(_components.span, {\n          className: "token method function property-access",\n          children: "log"\n        }), _jsx(_components.span, {\n          className: "token punctuation",\n          children: "("\n        }), "one ", _jsx(_components.span, {\n          className: "token operator",\n          children: "+"\n        }), " two ", _jsx(_components.span, {\n          className: "token operator",\n          children: "==="\n        }), " ", _jsx(_components.span, {\n          className: "token number",\n          children: "3"\n        }), _jsx(_components.span, {\n          className: "token punctuation",\n          children: ")"\n        }), _jsx(_components.span, {\n          className: "token punctuation",\n          children: ";"\n        }), "\\n", _jsx(_components.span, {\n          className: "token keyword",\n          children: "const"\n        }), " js ", _jsx(_components.span, {\n          className: "token operator",\n          children: "="\n        }), " ", _jsx(_components.span, {\n          className: "token string",\n          children: "\'is good!\'"\n        }), _jsx(_components.span, {\n          className: "token punctuation",\n          children: ";"\n        }), "\\n"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component, place) {\n  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it." + (place ? "\\nIt‚Äôs referenced in your code at `" + place + "`" : ""));\n}\n';

export const sampleMDXData = {compiledSource: sampleCompiledSourceHtml, frontmatter: {}, scope: {}};

export const tempProjects: Omit<ProjectDocument, 'id' | 'category' | 'date'>[] = [
  {
    links: [
      {text: 'Internal', href: '/'},
      {text: 'External(Naver)', href: 'https://www.naver.com/'},
    ],
    subject: 'Sample Project (MDX)',
    content: sampleMDXData,
    extension: '.mdx',
  },
  {
    subject: 'THE SAMPLE MDX',
    content: sampleMDXData,
    extension: '.mdx',
    thumbnail: '/sample.jpg',
  },
];
